require("dotenv").config();
const { Telegraf } = require("telegraf");
const sqlite3 = require("sqlite3").verbose();
const axios = require("axios");
const cron = require("node-cron");

const bot = new Telegraf(process.env.BOT_TOKEN);
const db = new sqlite3.Database("./websites.db");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
	db.run(`
		CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			username TEXT,
			first_name TEXT
		)
	`);

	db.run(`
		CREATE TABLE IF NOT EXISTS websites (
			id INTEGER PRIMARY KEY,
			url TEXT,
			last_status TEXT,
			user_id INTEGER,
			FOREIGN KEY (user_id) REFERENCES users(id)
		)
	`);
});

// üßë –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function upsertUser(ctx) {
	const user = ctx.from;
	db.run(
		`INSERT INTO users (id, username, first_name)
		 VALUES (?, ?, ?)
		 ON CONFLICT(id) DO UPDATE SET
			username = excluded.username,
			first_name = excluded.first_name
		`,
		[user.id, user.username || "", user.first_name || ""]
	);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
	upsertUser(ctx);
	ctx.reply(
		"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –µ—ë –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é."
	);
});

// –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command("list", (ctx) => {
	upsertUser(ctx);
	db.all(
		"SELECT url, last_status FROM websites WHERE user_id = ?",
		[ctx.from.id],
		(err, rows) => {
			if (err || rows.length === 0) return ctx.reply("–°–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
			const msg = rows
				.map(
					(r) =>
						`${r.url} ‚Äî ${
							r.last_status === "online"
								? "üü¢ –¥–æ—Å—Ç—É–ø–µ–Ω"
								: "üî¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
						}`
				)
				.join("\n");
			ctx.reply(msg);
		}
	);
});

// /delete <url>
bot.command("delete", (ctx) => {
	upsertUser(ctx);
	const parts = ctx.message.text.split(" ").slice(1);
	if (parts.length !== 1) return ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /delete <url>");

	const url = parts[0].trim();
	db.run(
		"DELETE FROM websites WHERE url = ? AND user_id = ?",
		[url, ctx.from.id],
		function (err) {
			if (err) return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞.");
			if (this.changes === 0) return ctx.reply("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			ctx.reply(`üóëÔ∏è –°–∞–π—Ç ${url} —É–¥–∞–ª—ë–Ω.`);
		}
	);
});

// /update <old_url> <new_url>
bot.command("update", (ctx) => {
	upsertUser(ctx);
	const parts = ctx.message.text.split(" ").slice(1);
	if (parts.length !== 2)
		return ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /update <—Å—Ç–∞—Ä—ã–π_url> <–Ω–æ–≤—ã–π_url>");

	const [oldUrl, newUrl] = parts;
	if (!/^https?:\/\//.test(newUrl)) {
		return ctx.reply("–ù–æ–≤—ã–π URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://");
	}

	db.run(
		"UPDATE websites SET url = ?, last_status = 'unknown' WHERE url = ? AND user_id = ?",
		[newUrl, oldUrl, ctx.from.id],
		function (err) {
			if (err) return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL.");
			if (this.changes === 0) return ctx.reply("–°—Ç–∞—Ä—ã–π URL –Ω–µ –Ω–∞–π–¥–µ–Ω.");
			ctx.reply(`‚úèÔ∏è –°–∞–π—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: ${oldUrl} ‚Üí ${newUrl}`);
		}
	);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
bot.on("text", (ctx) => {
	upsertUser(ctx);
	const url = ctx.message.text.trim();
	if (!/^https?:\/\//.test(url))
		return ctx.reply(
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—è —Å http:// –∏–ª–∏ https://"
		);

	db.run(
		"INSERT INTO websites (url, last_status, user_id) VALUES (?, ?, ?)",
		[url, "unknown", ctx.from.id],
		(err) => {
			if (err)
				return ctx.reply(
					"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ URL –∏–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
				);
			ctx.reply(
				"–î–æ–±–∞–≤–∏–ª —Å–∞–π—Ç –≤ —Å–ø–∏—Å–æ–∫! –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ–≥–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç."
			);
		}
	);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤
cron.schedule("*/5 * * * *", () => {
	db.all("SELECT * FROM websites", (err, rows) => {
		if (err) return console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î:", err.message);

		rows.forEach((row) => {
			axios
				.get(row.url, { timeout: 5000 })
				.then(() => {
					if (row.last_status !== "online") {
						db.run(
							"UPDATE websites SET last_status = ? WHERE id = ?",
							["online", row.id]
						);
					}
				})
				.catch(() => {
					if (row.last_status !== "offline") {
						db.run(
							"UPDATE websites SET last_status = ? WHERE id = ?",
							["offline", row.id]
						);
						const userId = process.env.ADMIN_ID || row.user_id;
						bot.telegram.sendMessage(
							userId,
							`‚ö†Ô∏è –°–∞–π—Ç ${row.url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!`
						);
					}
				});
		});
	});
});

// –ó–∞–ø—É—Å–∫
bot.launch();
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
